{"version":3,"sources":["components/Cards/Cards.module.css","components/header/header.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/header/header.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","WhiteTextTypography","withStyles","root","color","Typography","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableURL","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","hoverBorderColor","pointBorderColor","backgroundColor","fill","barChart","options","legend","display","title","text","WhiteTextSelect","NativeSelect","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","defaultValue","onChange","e","target","style","i","key","Header","header","socials","href","icon","faGithub","size","about","link","App","state","fetchedData","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b760427.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2YfKn\",\"card\":\"Cards_card__WE9xM\",\"infected\":\"Cards_infected__1ZQcw\",\"recovered\":\"Cards_recovered__1wlfJ\",\"deaths\":\"Cards_deaths__3CKCq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3aFUp\",\"title\":\"header_title__1f5Cf\",\"about\":\"header_about__YM3aR\",\"socials\":\"header_socials__1qKdQ\",\"icon\":\"header_icon__3jQ2x\"};","import React from \"react\";\r\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\n//Changes material-ui Typography color to white\r\nconst WhiteTextTypography = withStyles({\r\n  root: {\r\n    color: \"#FFFFFF\",\r\n  },\r\n})(Typography);\r\n\r\n//Takes daily data and turns it into Cards showing Global/country data on Covid-19\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <WhiteTextTypography gutterBottom>Infected</WhiteTextTypography>\r\n            <WhiteTextTypography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={1.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography variant=\"body2\">\r\n              COVID-19: Number of active cases\r\n            </WhiteTextTypography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <WhiteTextTypography gutterBottom>Recovered</WhiteTextTypography>\r\n            <WhiteTextTypography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={1.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography variant=\"body2\">\r\n              COVID-19: Number of recoveries\r\n            </WhiteTextTypography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <WhiteTextTypography gutterBottom>Deaths</WhiteTextTypography>\r\n            <WhiteTextTypography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={1.5}\r\n                separator=\",\"\r\n              ></CountUp>\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </WhiteTextTypography>\r\n            <WhiteTextTypography variant=\"body2\">\r\n              COVID-19: Number of deaths\r\n            </WhiteTextTypography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\n//Fetches data from api to be used in cards\r\nexport const fetchData = async (country) => {\r\n  let changeableURL = url;\r\n\r\n  if (country) {\r\n    changeableURL = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableURL);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {}\r\n};\r\n\r\n//Fetches daily data to be used in charts\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\n//Fetches countries\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\n//Takes daily data and outputs it into a chart\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  //Line charts used on global data\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            hoverBorderColor: \"white\",\r\n            pointBorderColor: \"rgba(255, 159, 101, 1)\",\r\n            backgroundColor: \"rgba(255, 159, 101, 0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            hoverBorderColor: \"white\",\r\n            pointBorderColor: \"rgba(120, 33, 41, 1)\",\r\n            backgroundColor: \"rgba(120, 33, 41, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  //bar charts are used when country is specified\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(255, 159, 101, 0.5)\",\r\n              \"rgba(197, 255, 101, 0.5)\",\r\n              \"rgba(120, 33, 41, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\n//Changes the text color of the country picker\r\nconst WhiteTextSelect = withStyles({\r\n  root: {\r\n    color: \"#FFFFFF\",\r\n  },\r\n})(NativeSelect);\r\n\r\n//Lets user pick country from all available countries\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.FormControl}>\r\n      <WhiteTextSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option\r\n          style={{ backgroundColor: \"rgb(36, 36, 36)\", color: \"white\" }}\r\n          value=\"\"\r\n        >\r\n          Global\r\n        </option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option\r\n            style={{ backgroundColor: \"rgb(36, 36, 36)\", color: \"white\" }}\r\n            key={i}\r\n            value={country}\r\n          >\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </WhiteTextSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nimport styles from \"./header.module.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <div className={styles.title}>COVID-19 Tracker</div>\r\n      <div className={styles.socials}>\r\n        <a href=\"https://github.com/GardLundh\" className=\"github social\">\r\n          <FontAwesomeIcon className={styles.icon} icon={faGithub} size=\"4x\" />\r\n        </a>\r\n      </div>\r\n      <p className={styles.about}>\r\n        Daily data on COVID-19 using\r\n        <a\r\n          className={styles.link}\r\n          href=\"https://github.com/mathdroid/covid-19-api\"\r\n        >\r\n          {\" \"}\r\n          Mathdroid api.\r\n        </a>\r\n      </p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker, Header } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  //Sets specified country\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <Header />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2MRvX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__QFOBF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2bzq3\"};"],"sourceRoot":""}